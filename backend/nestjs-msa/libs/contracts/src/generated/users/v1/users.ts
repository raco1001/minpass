// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.12.4
// source: users/v1/users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users.v1";

export enum Purpose {
  PURPOSE_UNSPECIFIED = "PURPOSE_UNSPECIFIED",
  PURPOSE_TERMS = "PURPOSE_TERMS",
  PURPOSE_PRIVACY = "PURPOSE_PRIVACY",
  PURPOSE_MARKETING = "PURPOSE_MARKETING",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export interface CreateUserRequest {
  email: string;
  locale: string;
  displayName: string;
}

export interface FindOneUserRequest {
  id: string;
}

export interface UpdateUserRequest {
  id: string;
  displayName: string;
}

export interface User {
  id: string;
  email: string;
  locale: string;
  displayName: string;
  createdAt: string;
  updatedAt: string;
}

export interface UserList {
  users: User[];
}

export interface Empty {
}

export interface RecordConsentRequest {
  userId: string;
  purpose: Purpose;
  scope: string;
}

export interface Consent {
  id: string;
  userId: string;
  purpose: Purpose;
  scope: string;
  grantedAt: string;
  revokedAt: string;
  createdAt: string;
  updatedAt: string;
}

export interface ConsentList {
  consents: Consent[];
}

export const USERS_V1_PACKAGE_NAME = "users.v1";

export interface UsersServiceClient {
  createUser(request: CreateUserRequest): Observable<User>;

  findAllUsers(request: Empty): Observable<UserList>;

  findOneUser(request: FindOneUserRequest): Observable<User>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  removeUser(request: FindOneUserRequest): Observable<User>;
}

export interface UsersServiceController {
  createUser(request: CreateUserRequest): Promise<User> | Observable<User> | User;

  findAllUsers(request: Empty): Promise<UserList> | Observable<UserList> | UserList;

  findOneUser(request: FindOneUserRequest): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest): Promise<User> | Observable<User> | User;

  removeUser(request: FindOneUserRequest): Promise<User> | Observable<User> | User;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findAllUsers", "findOneUser", "updateUser", "removeUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";

export interface ConsentsServiceClient {
  recordConsent(request: RecordConsentRequest): Observable<Consent>;

  listConsents(request: FindOneUserRequest): Observable<ConsentList>;
}

export interface ConsentsServiceController {
  recordConsent(request: RecordConsentRequest): Promise<Consent> | Observable<Consent> | Consent;

  listConsents(request: FindOneUserRequest): Promise<ConsentList> | Observable<ConsentList> | ConsentList;
}

export function ConsentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["recordConsent", "listConsents"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ConsentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ConsentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONSENTS_SERVICE_NAME = "ConsentsService";
