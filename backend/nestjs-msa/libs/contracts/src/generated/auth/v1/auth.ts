// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.12.4
// source: auth/v1/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth.v1";

/**
 * Social Login Request
 * Contains OAuth provider information and user profile data
 * Note: Authorization code exchange is handled by API Gateway,
 * so we only need the user profile and tokens here
 */
export interface SocialLoginRequest {
  /** OAuth provider (google, github, kakao) */
  provider: string;
  socialUserProfile: SocialUserProfile | undefined;
}

/**
 * Login Result
 * Contains JWT tokens and user information
 */
export interface LoginResult {
  userId: string;
  accessToken: string;
  isNewUser: boolean;
}

/**
 * Social User Profile
 * Standardized user profile from OAuth providers
 * Populated by Passport strategies in API Gateway
 */
export interface SocialUserProfile {
  /** OAuth provider's unique user ID */
  clientId: string;
  /** User's email address */
  email: string;
  /** User's full name */
  name: string;
  /** User's display name/nickname */
  nickname: string;
  /** URL to user's profile image */
  profileImage: string;
  /** OAuth provider name */
  provider: string;
  /** Access token from OAuth provider */
  providerAccessToken: string;
  /** Refresh token from OAuth provider */
  providerRefreshToken: string;
}

export const AUTH_V1_PACKAGE_NAME = "auth.v1";

/**
 * Authentication Service
 * Handles OAuth-based social login and JWT token generation
 */

export interface AuthServiceClient {
  socialLogin(request: SocialLoginRequest): Observable<LoginResult>;
}

/**
 * Authentication Service
 * Handles OAuth-based social login and JWT token generation
 */

export interface AuthServiceController {
  socialLogin(request: SocialLoginRequest): Promise<LoginResult> | Observable<LoginResult> | LoginResult;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["socialLogin"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
