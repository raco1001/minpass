// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.12.4
// source: auth/v1/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth.v1";

export interface SocialLoginRequest {
  provider: string;
  code: string;
  socialUserProfile: ISocialUserProfile | undefined;
}

export interface ILoginResult {
  userId: string;
  accessToken: string;
  isNewUser: boolean;
}

export interface ISocialUserProfile {
  clientId: string;
  email: string;
  name: string;
  nickname: string;
  profileImage: string;
  provider: string;
  providerAccessToken: string;
  providerRefreshToken: string;
}

export const AUTH_V1_PACKAGE_NAME = "auth.v1";

export interface AuthServiceClient {
  socialLogin(request: SocialLoginRequest): Observable<ILoginResult>;
}

export interface AuthServiceController {
  socialLogin(request: SocialLoginRequest): Promise<ILoginResult> | Observable<ILoginResult> | ILoginResult;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["socialLogin"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
