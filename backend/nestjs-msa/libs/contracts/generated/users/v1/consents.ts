// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.12.4
// source: users/v1/consents.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { FindOneUserRequest } from "./users";

export const protobufPackage = "users.v1";

export enum Purpose {
  PURPOSE_UNSPECIFIED = 0,
  PURPOSE_TERMS = 1,
  PURPOSE_PRIVACY = 2,
  PURPOSE_MARKETING = 3,
  UNRECOGNIZED = -1,
}

export interface RecordConsentRequest {
  userId: string;
  purpose: Purpose;
  scope: string;
}

export interface Consent {
  id: string;
  userId: string;
  purpose: Purpose;
  scope: string;
  grantedAt: string;
  revokedAt: string;
  createdAt: string;
  updatedAt: string;
}

export interface ConsentList {
  items: Consent[];
}

export const USERS_V1_PACKAGE_NAME = "users.v1";

export interface ConsentsServiceClient {
  recordConsent(request: RecordConsentRequest): Observable<Consent>;

  listConsents(request: FindOneUserRequest): Observable<ConsentList>;
}

export interface ConsentsServiceController {
  recordConsent(request: RecordConsentRequest): Promise<Consent> | Observable<Consent> | Consent;

  listConsents(request: FindOneUserRequest): Promise<ConsentList> | Observable<ConsentList> | ConsentList;
}

export function ConsentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["recordConsent", "listConsents"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ConsentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ConsentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONSENTS_SERVICE_NAME = "ConsentsService";
